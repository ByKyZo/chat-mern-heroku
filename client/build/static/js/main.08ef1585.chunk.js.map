{"version":3,"sources":["config.js","context/UserContext.js","containers/Authentication/Login/Login.js","containers/Authentication/Signup/Signup.js","containers/Authentication/Authentication.js","containers/ChatApp/ChatNav/Mode/NavChannelMode/ModalCreateChannel/CreateChannelModal.js","containers/ChatApp/ChatNav/Mode/NavChannelMode/ChannelSearch/ChannelSearch.js","components/NavComponents/NavHead.js","containers/ChatApp/ChatNav/Mode/NavChannelMode/ChannelHome/ChannelHome.js","containers/ChatApp/ChatNav/Mode/NavChannelMode/CurrentChannel/CurrentChannel.js","containers/ChatApp/ChatNav/Mode/NavChannelMode/NavChannelMode.js","containers/ChatApp/ChatNav/Mode/NavMessageMode/NavMessageMode.js","containers/ChatApp/ChatNav/ChatNav.js","containers/ChatApp/ChannelMode/Message/Message.js","containers/ChatApp/ChannelMode/ChannelMode.js","containers/ChatApp/MessageMode/MessageMode.js","containers/ChatApp/ChatApp.js","App.js","index.js"],"names":["API_URL","UserContext","React","createContext","Login","isAlreadyMember","useCookies","setCookie","setUser","useContext","useState","error","setError","email","password","userAuth","setUserAuth","className","noValidate","onSubmit","e","preventDefault","axios","post","then","res","status","Error","id","data","_id","pseudo","description","picture","role","isConnected","remember_me_token","catch","err","htmlFor","icon","faEnvelope","type","placeholder","value","autoComplete","onChange","target","faLock","onClick","Signup","userSignup","useFormik","initialValues","confirmPassword","validationSchema","Yup","required","oneOf","values","user","console","log","handeSignup","handleSubmit","faUser","getFieldProps","touched","errors","Authentication","props","setIsAlreadyMember","socket","io","CreateChannelModal","isOpen","setIsOpen","channels","addChannel","userID","name","channel","setChannel","channelModalRef","useRef","useMemo","on","useEffect","closeModalChannel","current","contains","window","addEventListener","removeEventListener","ref","spellCheck","emit","ChannelSearch","setChannels","openSearchList","setOpenSearchList","channelFind","setChannelFind","SearchListRef","SearchInput","handleLoadDataChannel","get","open","joinedUser","joinedChannel","old","close","handleCloseSearchList","document","faSearch","onFocus","map","index","push","length","channelID","infos","handleJoinChannel","returnFindChannel","NavHead","title","children","ChannelHome","selectChannel","isOpenChannelModal","setIsOpenChannelModal","loading","setLoading","finally","bannedMember","oldChannels","filter","skelettList","i","channelLoadingSkelett","CurrentChannel","currentChannel","members","setMembers","oldMembers","member","classNasme","src","alt","owner","bannedMemberID","banInfo","handleBanChannelMember","leaveChannelInfo","handleLeaveChannel","NavChannelMode","NavMessageMode","ChatNav","currentMode","setMode","openProfileModal","setOpenProfileModal","profileModalRef","removeCookie","focusModal","href","faUserCircle","location","reload","image","faChevronDown","Message","message","date","hour","messageDay","split","currentDay","Date","toLocaleDateString","parseInt","handleFormatDate","Channel","channelMessage","setChannelMessage","messageRef","findIndex","mess","sendMessage","innerText","messageInformations","contentEditable","onKeyDown","keyCode","pressEnterForSendMessage","ChatApp","mode","selectedChannel","setSelectedChannel","ChannelMode","MessageMode","returnCurrentMode","userDisconnected","App","withCredentials","Provider","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.08ef1585.chunk.js","sourcesContent":["// PHP\r\n// export const API_URL = 'http://localhost/api-chat-group-master/';\r\n\r\n// NODE JS\r\n// export const API_URL = 'http://localhost:5050/api/';\r\n// export const API_URL = 'https://chat-group-master.herokuapp.com/api/';\r\nexport const API_URL = '';\r\n\r\n\r\n// export const SOCKET_URL = 'http://localhost:5050';\r\n// export const SOCKET_URL = 'https://chat-group-master.herokuapp.com';\r\nexport const SOCKET_URL = '';","import React from 'react';\r\n\r\nexport const UserContext = React.createContext(null);\r\n\r\n","import React, { useState, useContext } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEnvelope , faLock } from '@fortawesome/free-solid-svg-icons';\r\nimport { API_URL } from '../../../config';\r\nimport axios from 'axios';\r\nimport { UserContext } from '../../../context/UserContext';\r\nimport { useCookies } from 'react-cookie';\r\n\r\n// GERER ERREUR INDEX PASSWORD\r\n// GERER ERREUR INDEX PASSWORD\r\n// GERER ERREUR INDEX PASSWORD\r\n// GERER ERREUR INDEX PASSWORD\r\n                \r\n\r\nconst Login = ({isAlreadyMember}) => {\r\n\r\n    const [, setCookie] = useCookies();\r\n    const { setUser } = useContext(UserContext);\r\n    const [error , setError] = useState(false);\r\n    const [userAuth , setUserAuth] = useState({\r\n        email : '',\r\n        password : ''\r\n    })\r\n\r\n\r\n    const handleConnexion = () => {\r\n\r\n        axios.post(`${API_URL}user/signin`,userAuth)\r\n            .then(res => {\r\n                if (res.status === '') throw new Error();\r\n\r\n                setError(false); \r\n\r\n                setUser({\r\n                    id : res.data._id,\r\n                    pseudo : res.data.pseudo,\r\n                    email : res.data.email,\r\n                    description : res.data.description,\r\n                    picture : res.data.picture,\r\n                    role : null,\r\n                    isConnected : true \r\n                })\r\n\r\n                setCookie(['REMEMBER_ME'],res.data.remember_me_token)\r\n            })\r\n            .catch(err => {\r\n                setError(true);\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <h1 className='mb-8 text-4xl text-white uppercase'>Login</h1>\r\n            <form className='w-full' noValidate onSubmit={e => {\r\n                e.preventDefault()\r\n                handleConnexion()\r\n            }}>\r\n                <div className=\"authInputWrapper mb-5\">\r\n                    <label htmlFor='emailLogin' className='cursor-pointer'>\r\n                        <FontAwesomeIcon className='text-gray-600 text-2xl m-4' icon={faEnvelope} />\r\n                    </label>\r\n\r\n                    <input  id='emailLogin' type=\"email\" className=\"authInput\" placeholder='Email' value={userAuth.email} autoComplete='on'\r\n                            onChange={e => setUserAuth({...userAuth , 'email' : e.target.value})}/>           \r\n                </div>\r\n            \r\n                <div className=\"authInputWrapper mb-5\">\r\n                    <label htmlFor='passwordLogin' className='cursor-pointer'>\r\n                        <FontAwesomeIcon className='text-gray-600 text-2xl m-4 cursor-pointer' icon={faLock} />\r\n                    </label>\r\n\r\n                    <input  id='passwordLogin' type=\"password\" className=\"authInput\" placeholder='Password' value={userAuth.password} \r\n                            onChange={e => setUserAuth({...userAuth , 'password' : e.target.value})}/>           \r\n                </div>\r\n\r\n                {error && <p className='text-red-400'>Email or password incorrect</p>}\r\n\r\n                <button className='authBtn w-full bg-blue-700 hover:bg-opacity-80' type='submit'>Connexion</button>\r\n            </form>\r\n\r\n            <button className='authBtn p-8 bg-green-700 hover:bg-opacity-80' onClick={() => isAlreadyMember(false)}>Register</button>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { API_URL } from '../../../config';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser , faLock , faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'; \r\n\r\nconst Signup = ({isAlreadyMember}) => {\r\n\r\n    const handeSignup = (user) => {\r\n        axios.post(`${API_URL}user/signup`,user)\r\n            .then(res => {\r\n                console.log(res);\r\n            })\r\n            .catch((err) => {\r\n                console.log('ERROR ---- ' + err);\r\n            })\r\n    }\r\n\r\n    const userSignup = useFormik({\r\n        initialValues : {\r\n            pseudo : '',\r\n            email : '',\r\n            password : '',\r\n            confirmPassword : ''\r\n        },\r\n        validationSchema : Yup.object({\r\n            pseudo :  Yup.string()\r\n                        .required('Required'),\r\n\r\n            email :     Yup.string()\r\n                        .required('Email address is required')\r\n                        .email('Invalid email address'),\r\n\r\n            password :  Yup.string()\r\n                        .required('Password is required'),\r\n\r\n            confirmPassword :   Yup.string()\r\n                                .required('Please confirm your password')\r\n                                .oneOf([Yup.ref('password'), null], 'Password must matched')\r\n        }),\r\n        onSubmit : values => {\r\n            const user = {\r\n                pseudo : values.pseudo,\r\n                email : values.email,\r\n                password : values.password\r\n            }\r\n            handeSignup(user);\r\n        }\r\n    });\r\n\r\n     return (\r\n        <>\r\n\r\n            <h1 className='mb-8 text-4xl text-white uppercase'>Sign Up</h1>\r\n\r\n            <form onSubmit={userSignup.handleSubmit} className='w-full' autoComplete='off'>\r\n\r\n                <div className='mb-5'>\r\n                    <div className=\"authInputWrapper\">\r\n                        <label htmlFor='pseudo' className='cursor-pointer'>\r\n                            <FontAwesomeIcon icon={faUser} className='text-gray-600 text-2xl m-4'/>\r\n                        </label>\r\n                        <input \r\n                            id='pseudo' \r\n                            type=\"text\" \r\n                            className=\"authInput\" \r\n                            placeholder='Full Name' \r\n                            {...userSignup.getFieldProps('pseudo')}/>\r\n                    </div>   \r\n                        {\r\n                            userSignup.touched.pseudo && userSignup.errors.pseudo &&\r\n            \r\n                            <p className='text-red-400'>{userSignup.errors.pseudo}</p>\r\n\r\n                        }\r\n                </div>   \r\n\r\n        \r\n                <div className='mb-5'>\r\n                    <div className=\"authInputWrapper\">\r\n                        <label htmlFor='Email' className='cursor-pointer'>\r\n                            <FontAwesomeIcon icon={faEnvelope} className='text-gray-600 text-2xl m-4'/>\r\n                        </label>\r\n                        <input \r\n                            id='Email' \r\n                            type=\"text\" \r\n                            className=\"authInput\" \r\n                            placeholder='Email'\r\n                            {...userSignup.getFieldProps('email')}/>           \r\n                    </div>\r\n                        {\r\n                            userSignup.touched.email && userSignup.errors.email &&\r\n            \r\n                            <p className='text-red-400'>{userSignup.errors.email}</p>\r\n\r\n                        }\r\n                </div>\r\n\r\n                <div className='mb-5'>\r\n                    <div className=\"authInputWrapper\">\r\n                        <label htmlFor='Password' className='cursor-pointer'>\r\n                            <FontAwesomeIcon icon={faLock} className='text-gray-600 text-2xl m-4'/>\r\n                        </label>\r\n                        <input \r\n                            id='Password' \r\n                            type=\"password\" \r\n                            className=\"authInput\" \r\n                            placeholder='Password' \r\n                            {...userSignup.getFieldProps('password')}/>\r\n                    </div>  \r\n                        {\r\n                            userSignup.touched.password && userSignup.errors.password &&\r\n            \r\n                            <p className='text-red-400'>{userSignup.errors.password}</p>\r\n\r\n                        }\r\n                </div>\r\n\r\n                <div className='mb-5'>\r\n                    <div className=\"authInputWrapper\">\r\n                        <label htmlFor='ConfirmPassword' className='cursor-pointer'>\r\n                            <FontAwesomeIcon icon={faLock} className='text-gray-600 text-2xl m-4'/>\r\n                        </label>\r\n                        <input \r\n                            id='ConfirmPassword' \r\n                            type=\"password\" \r\n                            className=\"authInput\"\r\n                            placeholder='Confirm password'\r\n                            {...userSignup.getFieldProps('confirmPassword')}/>\r\n                    </div>\r\n                        {\r\n                            userSignup.touched.confirmPassword && userSignup.errors.confirmPassword &&\r\n            \r\n                            <p className='text-red-400'>{userSignup.errors.confirmPassword}</p>\r\n\r\n                        }\r\n                </div>\r\n\r\n                <button className='authBtn w-full bg-blue-700 hover:bg-opacity-80' type='submit'>Sign Up</button>\r\n\r\n            </form>\r\n\r\n            <button className='authBtn p-8 bg-green-700 hover:bg-opacity-80' onClick={() => isAlreadyMember(true)}>Connexion</button>\r\n\r\n        </>\r\n     )\r\n\r\n}\r\n\r\nexport default Signup;","import React, { useState } from 'react';\r\nimport Login from './Login/Login';\r\nimport Signup from './Signup/Signup';\r\n\r\nconst Authentication = (props) => {\r\n\r\n    const [isAlreadyMember , setIsAlreadyMember] = useState(true);\r\n\r\n    return (\r\n        <div className='p-8 rounded-xl flex flex-col items-center justify-center w-96 shadow-2xl border border-gray-700 bg-gray-800'>\r\n                {\r\n\r\n                    isAlreadyMember ?\r\n\r\n                        <Login isAlreadyMember={setIsAlreadyMember} />\r\n\r\n                        :\r\n\r\n                        <Signup isAlreadyMember={setIsAlreadyMember} />\r\n\r\n                }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Authentication;","import React, { useContext, useEffect, useMemo, useRef , useState } from 'react';\r\nimport { API_URL , SOCKET_URL } from '../../../../../../config';\r\nimport { UserContext } from '../../../../../../context/UserContext';\r\nimport axios from 'axios';\r\nimport  io  from 'socket.io-client';\r\n\r\nconst socket = io(SOCKET_URL);\r\n\r\nconst CreateChannelModal = ({ isOpen , setIsOpen , channels , addChannel }) => {\r\n\r\n    const { user } = useContext(UserContext);\r\n    const [channel ,  setChannel] = useState({\r\n        // date : new Date().toJSON().slice(0,10).replace(/-/g,'/'),\r\n        userID : user.id,\r\n        name : '',\r\n        description : ''\r\n    })\r\n    const channelModalRef = useRef();\r\n\r\n    const createChannel = () => {\r\n  \r\n        socket.emit('createChannel',channel);\r\n    }\r\n\r\n    const memoizedChannel = useMemo(() => {\r\n        socket.on('createChannel',({userID , channel}) => {\r\n            if (userID !== user.id) return;\r\n            addChannel([...channels , channel]);\r\n        })\r\n    },[channel,setChannel])\r\n\r\n    useEffect(() => {\r\n        if (!isOpen) return;\r\n\r\n        const closeModalChannel = (e) => {\r\n            if (!channelModalRef.current.contains(e.target) && isOpen) setIsOpen(false);\r\n        }\r\n        window.addEventListener('mousedown',closeModalChannel)\r\n\r\n        return () => {\r\n            window.removeEventListener('mousedown',closeModalChannel)\r\n        }\r\n\r\n    },[isOpen])\r\n\r\n     return (\r\n        <div className={`absolute h-full w-full flex justify-center items-center bg-black bg-opacity-50  transform transition duration-200 ${isOpen ? 'opacity-100 z-50' : 'scale-0 opacity-0'}`}>\r\n\r\n            <div ref={channelModalRef} className=\"w-1/2 bg-black-1100 rounded-2xl p-6 xl:w-1/3\">\r\n\r\n                <div className='text-white font-semibold mb-7'>NEW CHANNEL</div>\r\n\r\n                <div>\r\n\r\n                    <input className='bg-InputCreateChannel rounded-md mb-5 p-2 w-full ctmFocus' type=\"text\"  id=\"\" \r\n                            value={channel.name}\r\n                            onChange={e => setChannel({...channel , 'name' : e.target.value})}\r\n                            />\r\n\r\n                    <textarea className='bg-InputCreateChannel rounded-md mb-5 p-2  w-full h-24 resize-none ctmFocus leading-4'\r\n                            spellCheck='false'\r\n                            value={channel.description}\r\n                            onChange={e => setChannel({...channel , 'description' : e.target.value})}\r\n                    ></textarea>\r\n\r\n                    <button className='bg-blue-600 rounded-md py-1 px-6 text-white ctmFocus hover:bg-blue-700 float-right'\r\n                            onClick={() => createChannel()}\r\n                    >Save</button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n     )\r\n\r\n}\r\n\r\nexport default CreateChannelModal;","import React, { useContext, useEffect, useRef, useState , useMemo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { UserContext } from '../../../../../../context/UserContext';\r\nimport axios from 'axios';\r\nimport { API_URL , SOCKET_URL } from '../../../../../../config'; \r\nimport io from 'socket.io-client';\r\nimport './openAnimation.css';\r\n\r\nconst socket = io(SOCKET_URL);\r\n\r\nconst ChannelSearch = ({ channels , setChannels }) => {\r\n\r\n    const [openSearchList , setOpenSearchList] = useState(false);\r\n    const [channelFind , setChannelFind] = useState([]);\r\n    const { user } = useContext(UserContext);\r\n    const SearchListRef = useRef();\r\n    const SearchInput = useRef();\r\n\r\n    const handleLoadDataChannel = () => {\r\n        axios.get(`${API_URL}channel/search/${user.id}`)\r\n        .then(res => {\r\n            setChannelFind(res.data)\r\n        })\r\n    }\r\n    \r\n    const handleSearchChannel = () => {\r\n        setOpenSearchList(true);\r\n        handleLoadDataChannel()\r\n    }\r\n\r\n    const handleJoinChannel = (channelID) => {\r\n        const infos = {\r\n            userID : user.id,\r\n            channelID\r\n        }\r\n\r\n        socket.emit('joinChannel',infos)\r\n    }\r\n    useEffect(() => {\r\n        socket.open()\r\n        socket.on('joinChannel',({ joinedUser , joinedChannel }) => {\r\n            handleLoadDataChannel()\r\n            setOpenSearchList(false)\r\n            if (joinedUser._id !== user.id) return;\r\n            setChannels(old => [...old, joinedChannel])\r\n        })   \r\n        return () => socket.close()     \r\n    },[])\r\n\r\n    const returnFindChannel = () => {\r\n        const channels = [];\r\n        channelFind.map((channel, index) => {\r\n            channels.push(  <li key={channel._id} className={`w-full flex items-center ${index !== channelFind.length -1 && 'border-b'} bg-gray-600 bg-opacity-70 transition duration-200 hover:bg-opacity-100`}>\r\n                                <button className='flex p-3 w-full ctmFocus items-center' onClick={() => handleJoinChannel(channel._id)}>\r\n                                    <div className='h-7 w-7 bg-red-400 rounded-md mr-4 flex items-center justify-center'>{channel.name[0]}</div>\r\n                                    <span>{channel.name}</span>\r\n                                </button>\r\n                            </li>\r\n                        )  \r\n        })\r\n        return channels;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleCloseSearchList = (e) => {\r\n            (!SearchListRef.current.contains(e.target) && !SearchInput.current.contains(e.target)) && setOpenSearchList(false)\r\n        }\r\n        document.addEventListener('mousedown',handleCloseSearchList)\r\n        return () => {\r\n            document.removeEventListener('mousedown',handleCloseSearchList)\r\n        }\r\n    },[openSearchList])\r\n\r\n     return (\r\n         <>\r\n            <div className='px-4'>\r\n                <div className='p-2 h-14 relative' ref={SearchInput}>\r\n                        <label htmlFor='search' className='absolute text-white top-4 left-4 cursor-pointer'><FontAwesomeIcon icon={faSearch}/></label>\r\n                        <input id='search' type='search' autoComplete='off' \r\n                            className='focus:outline-none h-full w-full rounded-md p-1 pl-10 inputSearch leading-10 ctmFocus' \r\n                            placeholder='Search'\r\n                            onFocus={() => handleSearchChannel()}\r\n                        />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"relative w-full\">\r\n                <div className={`absolute w-full px-4 overflow-hidden rounded-lg ${openSearchList ? 'z-50' : 'z-index--1'}`} ref={SearchListRef}>\r\n                    <ul className={`w-full bg-gray-500 rounded-lg transiton duration-200 ease-in-out opacity-0 overflow-hidden ${openSearchList && 'opacity-100'}`}>\r\n                        {\r\n                            returnFindChannel()\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </>\r\n     )\r\n\r\n}\r\n\r\nexport default ChannelSearch;","import React from 'react';\r\n\r\nconst NavHead = (props) => {\r\n\r\n     return (\r\n        <div className={`shadow-lg h-16 flex-shrink-0 text-gray-100 font-bold text-lg px-6 flex items-center ${props.className}`}>\r\n         \r\n            <span>{props.title}</span>\r\n\r\n            {props.children}\r\n\r\n        </div>\r\n     )\r\n\r\n}\r\n\r\nexport default NavHead;","import React, { useContext, useEffect, useState } from 'react';\r\nimport CreateChannelModal from '../ModalCreateChannel/CreateChannelModal';\r\nimport ChannelSearch from '../ChannelSearch/ChannelSearch';\r\nimport NavHead from '../../../../../../components/NavComponents/NavHead';\r\nimport { IoMdAdd } from 'react-icons/io';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport { API_URL , SOCKET_URL } from '../../../../../../config';\r\nimport { UserContext } from '../../../../../../context/UserContext';\r\nimport './scrollbar.css';\r\n\r\nconst socket = io(SOCKET_URL);\r\n\r\nconst ChannelHome = ({ selectChannel }) => {\r\n\r\n    const [isOpenChannelModal , setIsOpenChannelModal] = useState(false);\r\n    const [loading , setLoading] = useState(false);\r\n    const [channels , setChannels] =  useState([]);\r\n    const { user } = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        axios.get(`${API_URL}channel/${user.id}`)\r\n            .then( res => {\r\n                setChannels(res.data)\r\n                setLoading(false)\r\n            })\r\n            .finally (() => {\r\n                // console.log('stop loading')\r\n                setLoading(false)\r\n            })\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        socket.on('banMember', ({bannedMember , channelID}) => {\r\n            bannedMember._id === user.id && setChannels(oldChannels => oldChannels.filter(channel => channel._id !== channelID))\r\n        })\r\n    })\r\n    // const handleCreate\r\n\r\n    const channelLoadingSkelett = () => {\r\n        const skelettList = [];\r\n        for (let i = 0 ; i < 7 ; i++){\r\n            skelettList.push(<div key={i} className='flex items-center mb-4 cursor-pointer w-full p-2 rounded-lg animate-pulse'>\r\n                                <div className='w-8 h-8 rounded-md bg-gray-400 mr-3'></div>\r\n                                <div className='w-44 h-8 rounded-md bg-gray-400'></div>\r\n                            </div>)\r\n        }\r\n        return skelettList;\r\n    }\r\n\r\n     return (\r\n         <>\r\n            {/* CREATE CHANNEL MODAL */}\r\n            <CreateChannelModal isOpen={isOpenChannelModal} setIsOpen={setIsOpenChannelModal} channels={channels} addChannel={setChannels}/>\r\n            {/* ---------- */}\r\n\r\n            <NavHead title='Channel' className='justify-between'>\r\n\r\n                <button \r\n                    onClick={() => setIsOpenChannelModal(true)}\r\n                    className='channelIcon p-1 rounded-md ctmFocus hoverMenuProfileBg'>\r\n                    <IoMdAdd className='text-white'/>\r\n                </button>  \r\n\r\n            </NavHead>\r\n\r\n            <ChannelSearch channels={channels} setChannels={setChannels} />\r\n            \r\n            <div className=\"p-4 overflow-y-scroll scrollbar h-full\">\r\n\r\n                {\r\n                    loading ? channelLoadingSkelett() :\r\n\r\n                    channels.map((channel,index) => {\r\n                        return  <button key={channel._id} onClick={() => selectChannel(channel)}\r\n                                    className={`flex items-center ${index !== channels.length -1 && 'mb-4'} cursor-pointer w-full ctmFocus hoverMenuProfileBg p-2 rounded-lg`}>\r\n                                    <div className='w-8 h-8 channelIcon mr-3 rounded-md flex items-center justify-center text-white uppercase'>{channel.name[0]}</div>\r\n                                    <span className='text-gray-300 uppercase'>{channel.name}</span>\r\n                                </button>\r\n                    })\r\n                }\r\n\r\n            </div>\r\n         </>\r\n     )\r\n\r\n}\r\n\r\nexport default ChannelHome;","import React, { useContext, useEffect, useState } from 'react';\r\nimport NavHead from '../../../../../../components/NavComponents/NavHead';\r\nimport { HiOutlineChevronLeft } from 'react-icons/hi';\r\nimport { API_URL , SOCKET_URL } from '../../../../../../config';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport { UserContext } from '../../../../../../context/UserContext';\r\nimport { ImExit } from 'react-icons/im';\r\nimport { RiEdit2Fill , RiUser3Fill , RiVipCrownFill } from 'react-icons/ri';\r\nimport { IoBan } from 'react-icons/io5';\r\n// BOUTON POUR QUITTER LE CHANNEL \r\n// BOUTON POUR SUPPRIMER LE CHANNEL SI ADMIN DU CHANNEL ?\r\n// BOUTON POUR MODIFIER LE CHANNEL SI ADMIN DU CHANNEL ?\r\nconst socket = io(SOCKET_URL);\r\n\r\nconst CurrentChannel = ({ currentChannel , selectChannel }) => {\r\n\r\n    const [members , setMembers] = useState([]);\r\n    const { user } = useContext(UserContext);\r\n\r\n    const handleLeaveChannel = () => {\r\n        const leaveChannelInfo = {\r\n            userID : user.id,\r\n            channelID : currentChannel._id\r\n        }\r\n\r\n        axios.post(`${API_URL}user/channel/leave`,leaveChannelInfo)\r\n            .then(() => {\r\n                // selectChannel('')\r\n            })\r\n        selectChannel('')\r\n    }\r\n\r\n    const handleBanChannelMember = (bannedMemberID) => {\r\n        const banInfo = {\r\n            bannedMemberID,\r\n            channelID : currentChannel._id\r\n        }\r\n\r\n        socket.emit('banMember', banInfo);\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('joinChannel', ({joinedUser , joinedChannel}) => {\r\n        \r\n            setMembers(oldMembers => [...oldMembers, joinedUser])\r\n        })\r\n        socket.on('banMember', ({bannedMember , channelID}) => {\r\n            if(bannedMember._id === user.id && channelID === currentChannel._id) selectChannel('');\r\n              \r\n            if (channelID === currentChannel._id) setMembers(oldMembers => oldMembers.filter(member => member._id !== bannedMember._id));\r\n\r\n        })\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        axios.get(`${API_URL}channel/user/${currentChannel._id}`)\r\n            .then(res => {\r\n                setMembers(res.data);\r\n            })\r\n        return () => setMembers([]);\r\n    },[])\r\n\r\n     return (\r\n         <>\r\n            <NavHead classNasme='justify-start flex-shrink-0'>\r\n                <button className='text-2xl ctmFocus mr-3' onClick={() => selectChannel('')}>\r\n                    <HiOutlineChevronLeft />\r\n                </button>\r\n                <span>All channels</span>\r\n            </NavHead>\r\n\r\n                <div className=\"px-6 py-4\">\r\n                    <h3 className='uppercase text-gray-300 font-bold mb-2'>{currentChannel.name}</h3>\r\n                    <p className='text-gray-300'>{currentChannel.description ? currentChannel.description : 'no description'}</p>      \r\n                </div>\r\n                <h3 className='uppercase text-gray-300 font-bold px-6 py-4'>Members</h3>\r\n                    <ul className='overflow-y-scroll scrollbar h-full px-4'>\r\n                        {\r\n                            members.map((member, index) => {\r\n                                return  <li className='mb-4 flex justify-between' key={index}>\r\n                                                <div className='flex items-center p-2'>\r\n                                                    <img className='w-9 h-9 bg-white mr-5 rounded' src={member.picture} alt='C'/>\r\n                                                    <span className={`text-lg ${user.id === member._id ? 'text-gray-300' : 'text-gray-400'} font-bold`}>{member.pseudo}</span> \r\n                                                    {member._id === currentChannel.owner && <RiVipCrownFill className='ml-2 text-yellow-500'/>}\r\n                                                </div>\r\n                                            <div className='flex items-center text-white'>\r\n                                                <button className='ctmFocus p-1'>\r\n                                                    <RiUser3Fill />  \r\n                                                </button>\r\n\r\n                                                {(user.id === currentChannel.owner && member._id !== user.id) &&   \r\n\r\n                                                    <button className='ml-4 ctmFocus p-1' onClick={() => handleBanChannelMember(member._id)}>\r\n                                                        <IoBan />  \r\n                                                    </button>   \r\n                                                }\r\n                                                                                                                      \r\n                                            </div>  \r\n                                        </li>\r\n                            })\r\n                        }\r\n                    </ul>\r\n                    <div className='w-full h-16 flex '>\r\n                        <button className='w-full bg-gray-800 ctmFocus text-white flex items-center justify-center transiton duration-200 hover:bg-gray-900'>\r\n                            <RiEdit2Fill className='mr-3' />\r\n                            EDIT\r\n                        </button>\r\n                        {/* <div className='w-1 h-full bg-red-500'></div> */}\r\n                        <button className='w-full bg-gray-800 ctmFocus flex items-center justify-center text-red-400 transiton duration-200 hover:bg-gray-900' onClick={() => handleLeaveChannel()}>\r\n                            <ImExit className='mr-3' />\r\n                            LEAVE\r\n                        </button>\r\n                    </div>\r\n         </>\r\n     )\r\n\r\n}\r\n\r\nexport default CurrentChannel;","import React from 'react';\r\nimport ChannelHome from './ChannelHome/ChannelHome';\r\nimport CurrentChannel from './CurrentChannel/CurrentChannel';\r\n\r\nconst NavChannelMode = ( { selectChannel , currentChannel } ) => {\r\n\r\n     return (\r\n         <>\r\n            {\r\n                currentChannel ?\r\n\r\n                <CurrentChannel currentChannel={currentChannel} selectChannel={selectChannel} />\r\n\r\n                :\r\n\r\n                <ChannelHome selectChannel={selectChannel} />\r\n            }\r\n\r\n         </>\r\n     )\r\n\r\n}\r\n\r\nexport default NavChannelMode;","import React from 'react';\r\n\r\nconst NavMessageMode = (props) => {\r\n\r\n     return (\r\n         <div>\r\n\r\n            <div className='border-b-2 h-16 border-gray-900 text-gray-100 font-bold text-lg px-6 flex items-center justify-between'>\r\n\r\n                <h1 className='text-center text-white'>Message</h1>\r\n\r\n            </div>\r\n\r\n            <div className=\"p-4\">\r\n\r\n                <button className='flex items-center mb-4 cursor-pointer w-full ctmFocus hoverMenuProfileBg p-2 rounded-lg'>\r\n                    <div className='w-8 h-8 channelIcon mr-3 rounded-md flex items-center justify-center text-white'></div>\r\n                    <span className='text-gray-300'>Message</span>\r\n                </button>\r\n\r\n            </div>\r\n\r\n         </div>\r\n     )\r\n\r\n}\r\n\r\nexport default NavMessageMode;","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronDown , faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FaTwitter } from 'react-icons/fa';\r\nimport { IoMdExit } from 'react-icons/io';\r\nimport { UserContext } from '../../../context/UserContext';\r\nimport { useCookies } from 'react-cookie';\r\nimport NavChannelMode from './Mode/NavChannelMode/NavChannelMode';\r\nimport NavMessageMode from './Mode/NavMessageMode/NavMessageMode';\r\n\r\nconst ChatNav = ({ currentMode , setMode, selectChannel , currentChannel }) => {\r\n\r\n    const { user } = useContext(UserContext);\r\n    const [openProfileModal , setOpenProfileModal] = useState(false)\r\n    const profileModalRef = useRef();\r\n    const [,, removeCookie] = useCookies();\r\n\r\n\r\n    useEffect(() => {\r\n        const isOpen = openProfileModal;\r\n        const focusModal = (e) => {\r\n            if (!profileModalRef.current.contains(e.target) && isOpen) setOpenProfileModal(false)\r\n        }\r\n\r\n        window.addEventListener('click',focusModal)\r\n        return () => {\r\n            window.removeEventListener('click',focusModal)\r\n        }\r\n    },[openProfileModal])\r\n\r\n     return (\r\n         <div className='w-72 bg-black-900 flex flex-col justify-between flex-shrink-0'>\r\n\r\n            <>\r\n                    {\r\n                        currentMode === 'channel' ?\r\n\r\n                            <NavChannelMode currentChannel={currentChannel} selectChannel={selectChannel} /> \r\n\r\n                                :\r\n\r\n                            <NavMessageMode />\r\n                    }\r\n                    \r\n            </>\r\n\r\n            <div>\r\n\r\n                <div className=\"h-14 bg-gray-700 flex\">\r\n                    <button className='px-6 w-full text-gray-300 ctmFocus hover:bg-gray-800' onClick={() => setMode('channel')}>CHANNEL</button>\r\n                    <button className='px-6 w-full text-gray-300 ctmFocus hover:bg-gray-800' onClick={() => setMode('message')}>MESSAGE</button>\r\n                </div>\r\n\r\n                <a href='#' className=\"h-20 bg-black-1100 p-6 flex items-center justify-between w-full ctmFocus ring-inset relative\" onClick={e => {\r\n                    e.preventDefault()\r\n                    setOpenProfileModal(true)}}>\r\n                    <div ref={profileModalRef}\r\n                        className={`w-48 h-44 bg-black-700 absolute -top-36 right-4 rounded-xl p-3 transition duration-200 opacity-0 transform ${openProfileModal ? 'scale-100 opacity-100' : 'scale-0 opacity-0'}`}>\r\n                        <ul className='flex flex-col justify-evenly h-full text-left text-white'>\r\n                            <li>\r\n                                <button className='flex w-full transition duration-200 hoverMenuProfileBg rounded-lg p-2 items-center ctmFocus'>\r\n                                    <FontAwesomeIcon className='text-xl mr-3' icon={faUserCircle}/> \r\n                                    My Profile   \r\n                                </button>\r\n                            </li>\r\n                            <li>\r\n                                <button className='flex w-full transition duration-200 hoverMenuProfileBg rounded-lg p-2 items-center ctmFocus'>\r\n                                    <FaTwitter className='text-xl mr-3' />\r\n                                    Tweeter\r\n                                </button>\r\n                            </li>\r\n                            <li className='h-1 border-b border-gray-100 my-2 opacity-30'></li>\r\n                            <li>\r\n                                <button \r\n                                    className='flex w-full text-red-500 transition duration-200 hoverMenuProfileBg rounded-lg p-2 items-center ctmFocus' \r\n                                    onClick={() => {\r\n                                        removeCookie(['REMEMBER_ME'])\r\n                                        window.location.reload()\r\n                                    }}>\r\n                                    <IoMdExit className='text-xl mr-3' /> \r\n                                    Logout\r\n                                </button>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center\">\r\n                        <img className='h-10 w-10 mr-5' src={user.image} alt='profile'></img>\r\n                        <span className='text-gray-300 text-xl'>{user.pseudo}</span>\r\n                    </div>\r\n                    <FontAwesomeIcon className='text-gray-300' icon={faChevronDown}/>\r\n                </a>\r\n\r\n            </div>\r\n\r\n         </div>\r\n     )\r\n\r\n}\r\n\r\nexport default ChatNav;","import React from 'react';\r\n\r\nconst Message = ({user , message , date, hour}) => {\r\n\r\n    const handleFormatDate = () => {\r\n        const messageDay = date.split('/');\r\n        const currentDay = new Date().toLocaleDateString().split('/');\r\n        for (let i = 0 ; i <= 2 ; i++){\r\n            messageDay[i] = parseInt(messageDay[i]);\r\n            currentDay[i] = parseInt(currentDay[i]);\r\n        }\r\n\r\n        if (messageDay[1] == currentDay[1] && messageDay[2] == currentDay[2]){\r\n            if (messageDay[0] === currentDay[0]) return 'today at ';\r\n            else if (messageDay[0] === currentDay[0] - 1) return 'yesterday at ';\r\n        }\r\n\r\n        return date;\r\n    }\r\n    \r\n     return (\r\n        <li className='flex mb-4 w-full'>\r\n            <img \r\n                className='h-10 w-10 bg-white rounded-md mr-5 mt-1 flex-none' \r\n                src={user.picture} \r\n                alt={'C'}>\r\n            </img>\r\n            <div className='w-full'>\r\n                <div className='flex items-baseline'>\r\n                    <h2 className='mr-3 font-bold text-lg colorName'>{user.pseudo}</h2> \r\n                    <span className='text-gray-300 text-xs colorName'>{handleFormatDate() + ' ' + hour}</span>\r\n                </div>\r\n                <div className='text-gray-300 w-full'>{message}</div>\r\n            </div>\r\n        </li>\r\n     )\r\n\r\n}\r\n\r\nexport default Message;","import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { IoSend } from 'react-icons/io5';\r\nimport { UserContext } from '../../../context/UserContext';\r\nimport { API_URL , SOCKET_URL} from '../../../config';\r\nimport axios from 'axios';\r\nimport './customtailwind.css';\r\nimport io from 'socket.io-client';\r\nimport Message from './Message/Message';\r\n\r\n\r\nconst socket = io(SOCKET_URL);\r\n\r\nconst Channel = ({ currentChannel }) => {\r\n\r\n    const { user } = useContext(UserContext);\r\n    const [channelMessage , setChannelMessage] = useState([]);\r\n    const messageRef = useRef();\r\n\r\n    useEffect(() => {\r\n        // socket.open()\r\n        socket.on('sendMessage', (message) => {\r\n            // console.log('send message')\r\n            if (channelMessage.findIndex(mess => mess._id !== message._id) !== -1) return;\r\n            setChannelMessage(old => [...old, message])\r\n        })\r\n        // VOIR POUR LE DEMONTER\r\n\r\n        // return (() => {socket.close()});\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        axios.get(`${API_URL}channel/message/${currentChannel._id}`) // pas besoin de l'id modifier le back-end\r\n        .then(res => {\r\n            setChannelMessage(res.data)\r\n        })\r\n    },[])\r\n    \r\n    // const isMessageEmpty = () => {\r\n    //     if (!messageRef.current) return false;\r\n    //     return messageRef.current.innerText === '';\r\n    // }\r\n    \r\n    const sendMessage = () => {\r\n        const message = messageRef.current.innerText\r\n        if (!message) return;\r\n\r\n        const messageInformations = {\r\n            userID : user.id,\r\n            channelID : currentChannel._id,\r\n            message : message\r\n        }\r\n        messageRef.current.innerText = '';\r\n        socket.emit('sendMessage',messageInformations);\r\n    }   \r\n\r\n    const pressEnterForSendMessage = (e) => {\r\n        \r\n        if (e.keyCode !== 13) return;\r\n        e.preventDefault();\r\n        sendMessage()\r\n    }\r\n    const clickSendForMessage = () => {\r\n        sendMessage()\r\n    }\r\n\r\n     return (\r\n         <div className='flex flex-col h-full w-full justify-between'>\r\n            <div className='h-16 shadow-lg text-gray-100 font-bold text-lg px-11 flex items-center uppercase flex-shrink-0'>\r\n\r\n                <h1>{currentChannel.name ? currentChannel.name : 'Select channel'}</h1>\r\n\r\n            </div>\r\n                {\r\n                    currentChannel ? \r\n                    <>\r\n                        <div className='overflow-y-scroll h-full scrollbar flex flex-col-reverse'>\r\n                            <ul className='px-11 pt-6 break-all mt-auto'>\r\n                            { channelMessage &&\r\n                                channelMessage.filter(channel => channel.channelID === currentChannel._id).map(message => {\r\n                                    return  <Message key={message._id} {...message} />\r\n                                })\r\n                            }\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className='min-h-10 max-w-full mx-11 flex relative rounded-md overflow-hidden my-7 flex-shrink-0'>\r\n                                    <div \r\n                                        contentEditable='true'\r\n                                        ref={messageRef}\r\n                                        onKeyDown={(e) => pressEnterForSendMessage(e)}\r\n                                        className='h-full w-full inputSearch ctmFocus p-2 pr-10 break-all text-gray-300' \r\n                                        >\r\n                                    </div>\r\n                                <button \r\n                                    onClick={() => clickSendForMessage()}\r\n                                    className={`absolute right-1 inset-y-1 ctmFocus m-auto bg-blue-500  text-white h-8 w-8 flex items-center justify-center rounded-md cursor-pointer`}>\r\n                                    <IoSend />\r\n                                </button>\r\n                        </div>\r\n                    </>\r\n\r\n                    :\r\n\r\n                    <div className=\"flex items-center justify-center flex-col h-full\">\r\n                        <h3 className='text-4xl'>Welcome !</h3>\r\n                        <p>Please select channel</p>\r\n                    </div>\r\n                }\r\n\r\n         </div>\r\n     )\r\n\r\n}\r\n\r\nexport default Channel;","import React from 'react';\r\n\r\nconst Message = (props) => {\r\n\r\n     return (\r\n         <div>\r\n\r\n             <h1>Message</h1>\r\n\r\n         </div>\r\n     )\r\n\r\n}\r\n\r\nexport default Message;","import React, { useState } from 'react';\r\nimport ChatNav from './ChatNav/ChatNav';\r\nimport ChannelMode from './ChannelMode/ChannelMode';\r\nimport MessageMode from './MessageMode/MessageMode';\r\n\r\nconst ChatApp = (props) => {\r\n\r\n    const [mode , setMode] = useState('channel');\r\n    const [selectedChannel , setSelectedChannel] = useState('');\r\n\r\n    const returnCurrentMode = () => {\r\n        switch(mode){\r\n            case 'channel' : \r\n                return <ChannelMode currentChannel={selectedChannel}/>\r\n            case 'message' : \r\n                return <MessageMode />\r\n            default : \r\n                return <ChannelMode currentChannel={selectedChannel}/>\r\n        }\r\n    }\r\n\r\n     return (\r\n         <div className='w-full h-full bg-black-700 rounded-lg shadow-2xl flex overflow-hidden relative'>\r\n\r\n            <ChatNav currentMode={mode} setMode={setMode} currentChannel={selectedChannel} selectChannel={setSelectedChannel}/>\r\n\r\n            { returnCurrentMode() }\r\n\r\n         </div>\r\n     )\r\n\r\n}\r\n\r\nexport default ChatApp;","import React, { useEffect, useState } from 'react';\r\nimport { API_URL } from './config';\r\nimport Authentication from './containers/Authentication/Authentication';\r\nimport ChatApp from './containers/ChatApp/ChatApp';\r\nimport { UserContext } from './context/UserContext';\r\nimport { useCookies } from 'react-cookie';\r\nimport axios from 'axios';\r\n\r\nconst userDisconnected = {\r\n    id : null,\r\n    pseudo : null,\r\n    email : null,\r\n    description : null,\r\n    picture : null,\r\n    role : null,\r\n    isConnected : false\r\n}\r\n\r\nconst App = (props) => {\r\n\r\n    const [user , setUser] = useState(userDisconnected)\r\n    const [, setCookie, removeCookie] = useCookies()\r\n\r\n    useEffect(() => {\r\n        axios.get(`${API_URL}user/rememberme`,{withCredentials : true})\r\n            .then(res => {\r\n                if (res.data === '') throw new Error();\r\n                setUser({\r\n                    id : res.data._id,\r\n                    pseudo : res.data.pseudo,\r\n                    email : res.data.email,\r\n                    description : res.data.description,\r\n                    picture : res.data.picture,\r\n                    role : null,\r\n                    isConnected : true // pas besoin de ça\r\n                })\r\n                // A VOIR POUR FAIRE DE L'ASYNC\r\n                setCookie(['REMEMBER_ME'],res.data.remember_me_token)\r\n            })\r\n            .catch(err => {\r\n                setUser(userDisconnected);\r\n                removeCookie(['REMEMBER_ME'])\r\n            })\r\n    \r\n    },[])\r\n\r\n    return (\r\n        <div className='h-screen flex justify-center items-center bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 p-10'>\r\n\r\n            <UserContext.Provider value={{user , setUser}} >\r\n            \r\n            {   \r\n                !user.isConnected ?  \r\n\r\n                <Authentication /> \r\n\r\n                : \r\n\r\n                <ChatApp />     \r\n            }\r\n   \r\n            </UserContext.Provider>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './tailwindCustomClass.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App /> , document.querySelector('#root'));"],"sourceRoot":""}